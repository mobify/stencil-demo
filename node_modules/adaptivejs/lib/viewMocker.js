/* global describe, beforeEach, it, afterEach */

define([
    '$',
    'adaptivejs/adaptive',
    'adaptivejs/utils',
    'adaptivejs/view',
    'adaptivejs/defaults',
    'lib/documentFactory',
    'lodash'
], function($, Adaptive, Utils, View, defaults, DocumentFactory, _) {

    var TestView = function(view, fixture) {
        this.view = view;
        this.fixture = fixture;
    };

    /**
     * Sets up the mocker by processing the context and the
     * template. The template is attached to the selector
     * library's document, which can then be used in tests.
     */
    TestView.prototype.setup = function() {
        var doc = DocumentFactory.makeDocument(this.fixture);
        var mockView = _.cloneDeep(this.view);

        this._originalDoc = $.getDocument();
        $.attachDocument(doc);

        var defaultContext = defaults.getContext(doc);

        mockView.context = View.evaluateContext(mockView, defaultContext);
        mockView.template(mockView.context, function(err, out) {
            mockView.html = out;
        });

        $.attachDocument(DocumentFactory.makeDocument(mockView.html));

        this.mockView = mockView;
    };

    /**
     * Restores the original document back to the selector
     * library's document, cleaning up test resources.
     */
    TestView.prototype.teardown = function() {
        $.attachDocument(this._originalDoc);
    };

    /**
     * Sets up the mocked view automatically for a suite of tests.
     * Additionally it binds the selector engine to the adapted document,
     * allowing for testing the HTML structure.
     */
    var test = function(title, view, fixture, tests) {
        var mock = new TestView(view, fixture);
        var makeTest = function(test) {
            var testName = test;

            it(testName, function() {
                tests[testName].call(mock, $, mock.mockView.context);
            });
        };

        describe(title, function() {
            beforeEach(function() {
                mock.setup();
            });

            for (var test in tests) {
                if (tests.hasOwnProperty(test)) {
                    makeTest(test);
                }
            }

            afterEach(function() {
                mock.teardown();
            });
        });
    };

    return test;
});
