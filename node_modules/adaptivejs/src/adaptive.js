define([
    '$',
    'adaptivejs/defaults',
    'adaptivejs/logger',
    'adaptivejs/utils',
    'mobifyjs/capture'
], function($, Defaults, Logger, Utils, Capture) {

    // Backwards compatibility fix needed for v6 tag
    window.Mobify = window.Mobify || {};
    window.Mobify.api = true;

    // Instantiate the Adaptive object
    var Adaptive = window.Adaptive = window.Adaptive || {};

    /**
    * Restore the original document when capturing
    */
    Adaptive.restore = function() {
        // Make sure we don't render the current doc before restoring
        Adaptive.disabled = true;

        // Inject Mobify analytics script to track errors
        var ajsScript = Utils.getAjs(Defaults.projectName);
        Adaptive.capture.restore(ajsScript);
        window.Mobify.capturing = false;
    };

    /**
    * Set mobify-path= on the cookie and reload the page so that tag falls
    * through to the original page.  Disables adaptation for subsequent requests
    *
    * url: Optional url to redirect to after opting out.
    */
    Adaptive.disable = function(url) {
        document.cookie = 'mobify-path=; path=/;';

        var capturing = window.Mobify && window.Mobify.capturing || false;

        if (!capturing) {
            if (url) {
                window.location = url;
                return;
            }

            // Use window.reload in webkit only since it doesn't work in Firefox
            if (/webkit/i.test(window.navigator.userAgent)) {
                // Clear the mobify-overide hash before reloading (if we don't
                // remove the mobify-override, it will force us back into
                // preview mode again)
                if (Utils.isDebug()) {
                    window.location.hash = '';
                }
                window.location.reload(true);
            } else {
                window.location = window.location.pathname;
            }

            return;
        }

        Adaptive.restore();
    };

    // Method for initializing 'Adaptive'
    // callback(capturedDocument)
    Adaptive.init = function(callback) {
        var capturing = window.Mobify && window.Mobify.capturing || false;

        if (capturing) {
            // Setup the logger and initialize the start time

            Logger.init({start: Mobify.points[0], debug: Utils.isDebug()});
            Logger.addTimingPoint('Starting capture of original document');

            // Grab reference to a newly created document
            Capture.init(function(capture) {
                // Store the 'capture' object on 'Adaptive' for later use when
                // rendering
                Logger.addTimingPoint('Capture is complete');
                Adaptive.capture = capture;
                var buildScript = capture.capturedDoc.getElementsByTagName('script')[0];
                if (buildScript && /adaptive(\.min)?\.js/.test(buildScript.getAttribute('x-src'))) {
                    buildScript.parentNode.removeChild(buildScript);
                }
                // Bind selector engine to the captured document
                $.attachDocument(capture.capturedDoc);
                callback(capture.capturedDoc);
            });
        }
        else {
            // Expose Almond to UI scripts
            Adaptive.AMD = {};
            Adaptive.AMD.require = require;
            Adaptive.AMD.define = define;
            // Expose $ for front-end scripts
            Adaptive.$ = $;

            // We're not capturing. Bind selector library to original document
            $.attachDocument(document);
            // Adds logging points for Load and DOMContentLoaded events
            Logger.setDebugger(Utils.isDebug());
            Logger.addTimingPoint('Rendering Done');
            Logger.addDOMContentListener();
            Logger.addOnLoadListener(function() {
                Logger.logTimingPoints();
            });
        }
    };

    Adaptive.renderPage = function(htmlStr) {
        if (!Adaptive.disabled) {
            if (!Adaptive.capture) {
                throw 'We are using Capturing, but there is no capture object to render';
            }
            Logger.addTimingPoint('Rendering Start');
            Adaptive.capture.render(htmlStr);
        }
    };

    return Adaptive;
});
