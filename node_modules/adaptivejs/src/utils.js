define([
    'mobifyjs/utils',
    'buildConfig',
], function(Utils, buildConfig) {

    var AdaptiveUtils = {};
    Utils.extend(AdaptiveUtils, Utils);

    /**
     *  Pulled from Lodash, because we only use these few functions.
     */
    AdaptiveUtils.isFunction = function(value) {
        return typeof value === 'function';
    };

    // fallback for older versions of Chrome and Safari
    if (AdaptiveUtils.isFunction(/x/)) {
        AdaptiveUtils.isFunction = function(value) {
            return typeof value === 'function' && Object.prototype.toString.call(value) === '[object Function]';
        };
    }

    AdaptiveUtils.isObject = function(value) {
        // check if the value is the ECMAScript language type of Object
        // http://es5.github.io/#x8
        // and avoid a V8 bug
        // https://code.google.com/p/v8/issues/detail?id=2291
        var type = typeof value;
        return value && (type === 'function' || type === 'object') || false;
    };

    AdaptiveUtils.isRegExp = function(value) {
        var type = typeof value;

        return value && (type === 'function' || type === 'object') &&
            Object.prototype.toString.call(value) === '[object RegExp]' || false;
    };

    /**
     *  Creates a script string that will load a.js
     */
    AdaptiveUtils.getAjs = function(name, template) {
        var qs = template ? 'm=1&t=' + template : 't=miss';

        return '<script src="//a.mobify.com/' + name + '/a.js#' + qs + '" async></script>';
    };

    /**
     * Determines if the supplied node is a Node type, or a Node type of
     * the node's window. On some browsers Nodes created within an iframe
     * are not instances of the root/parent document's Node class.
     */
    var isNode = function(node) {
        return (node instanceof Node) ||
               (node && node.ownerDocument && node.ownerDocument.defaultView &&
                (node instanceof node.ownerDocument.defaultView.Node));
    };

    /**
     *  Returns true if obj is a Zepto/jQuery object or a DOM node
     */
    AdaptiveUtils.isDOMLike = function(obj) {
        if (window.Zepto && Zepto.zepto.isZ(obj)) {
            return true;
        } else if (window.jQuery && obj instanceof jQuery.fn.constructor) {
            return true;
        } else if (isNode(obj)) {
            return true;
        }

        return obj instanceof HTMLElement;
    };

    /**
     *  Returns the url of the adaptive.js build file and caches it
     */
    var cachedBuildScript;
    AdaptiveUtils.getAdaptiveBuildScript = function() {
        try {
            // Get the first script on the page
            // If it's the build script, cache it and return it
            if (cachedBuildScript) {
                return cachedBuildScript;
            }
            var firstScript = document.getElementsByTagName('script')[0];
            if (/(mobify|adaptive)(\.min)?\.js/.test(firstScript.getAttribute('src'))) {
                cachedBuildScript = cachedBuildScript || firstScript;
                return cachedBuildScript;
            }
            return undefined;
        } catch (e) {
            console.error('Couldn\'t determine adaptivejs build file used. The mobify-tag may be placed incorrectly.');
        }
    };

    /**
     *  Grabs the location of the build so we can reference assets
     *  with absolute urls
     */
    AdaptiveUtils.getBuildOrigin = function() {
        var buildOrigin = '//localhost:8080/';
        var adaptiveBuildScript = this.getAdaptiveBuildScript();

        if (adaptiveBuildScript) {
            try {
                var adaptiveBuildSrc = adaptiveBuildScript.getAttribute('src');
                buildOrigin = adaptiveBuildSrc.replace(/\/[^\/]*$/, '/');
            } catch (e) {
                console.error('Couldn\'t determine adaptivejs build file used. The mobify-tag may be placed incorrectly.');
            }
        }
        return buildOrigin;
    };

    /**
     *  Returns the full url for the provided asset path
     *  including a cache breaker.
     *  basePath and cacheBreaker arguments are optional
     */
    AdaptiveUtils.getAssetUrl = function(path, baseUrl, cacheBreaker) {
        var hash = buildConfig.cacheHashManifest[path];

        // If path isn't found in the hashManifest, cache break with build date
        if (cacheBreaker === undefined) {
            cacheBreaker = hash ? hash : buildConfig.buildDate;
        }

        return (baseUrl || this.getBuildOrigin()) + path + '?' + cacheBreaker;
    };

    /**
     *  If the mobify-path cookie is present, then we are in debug mode
     */
    AdaptiveUtils.isDebug = function(cookie) {
        cookie = cookie || document.cookie;

        var match = /mobify-path=([^&;]*)/.exec(cookie);

        return !!match;
    };

    return AdaptiveUtils;

});
