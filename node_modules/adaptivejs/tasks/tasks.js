var path = require('path');
var semver = require('semver');

module.exports = function(grunt) {

    // Change current working directory to this npm module's directory
    var parentcwd = process.cwd();
    process.chdir(path.join(__dirname, '../'));

    // load npm tasks
    var npmTasks = [
        'grunt-cachebuster',
        'grunt-contrib-connect',
        'grunt-contrib-watch',
        'grunt-concurrent',
        'grunt-mobify-cloud',
        'grunt-mocha-phantomjs',
        'grunt-requirejs',
        'grunt-sync'
    ];

    npmTasks.forEach(function(taskName) {
        if(!grunt.task._tasks[taskName]) {
            grunt.loadNpmTasks(taskName);
        }
    });

    // Remove build directory contents
    grunt.registerTask('clean', function() {
        grunt.file.delete('build/');
        grunt.file.mkdir('build/');
    });

    // Build config file which contains buildDate and hashManifest
    grunt.registerTask('adaptive-build_config', function() {
        var template = grunt.file.read(__dirname + '/buildConfig.tmpl');
        var destination = 'build/buildConfig.js';

        var cacheHashManifest = grunt.file.readJSON('tmp/cacheHashManifest.json');
        var context = {data: {cacheHashManifest: JSON.stringify(cacheHashManifest)}};

        grunt.file.write(destination, grunt.template.process(template, context));
    });

    /**
     * Ensures that the version of adaptivejs denoted in `package.json`
     * satisfies the currently installed version.
     */
    grunt.registerTask('adaptive-ensure_synced', function() {
        var done = this.async();
        var options = { cmd: 'npm', args: ['ls', 'adaptivejs', '-json'] };

        grunt.util.spawn(options, function(error, result, code) {
            // `npm` returns an error code of `1` when there is an invalid
            // dependency.
            if (code !== 0 && code !== 1) {
                grunt.warn('Could not retrieve the version of adaptivejs that '
                    + 'is installed');
                return done();
            }

            // `npm` sets an `invalid` property when the installed version of
            // a dependency does not satisfy the one listed in `package.json`
            var result = JSON.parse(result.stdout);

            if (result.dependencies) {
                var adaptivejs = result.dependencies['adaptivejs'];

                if (adaptivejs && adaptivejs.invalid) {
                    grunt.warn('Your package.json denotes a different version '
                        + 'of adaptivejs than the one currently installed.\r\n'
                        + 'Please run `npm install`.');
                }
            }

            done();
        });
    });

    /**
     * Vellum requires Sass >= 3.3.0, this task ensures that it is installed.
     */
    grunt.registerTask('adaptive-ensure_sass_exists_for_vellum', function() {
        var done = this.async();
        var options = { cmd: 'sass', args: ['--version'] };

        grunt.util.spawn(options, function(error, result, code) {
            if (code !== 0) {
                grunt.fatal('Vellum requires Sass. To install please visit http://sass-lang.com/install');
            }

            // Because we're using `semver` to compare versions, only look for
            // a semantic version otherwise the comparison will fail.
            var version = result.stdout.match(/\d+\.\d+\.\d+/);
            if (!version) {
                grunt.warn('Could not retrieve the installed version of Sass.');
                return done();
            }
            version = version[0];

            if (semver.lt(version, '3.3.0')) {
                grunt.fatal('Vellum requires Sass >= 3.3.0. To upgrade please visit http://sass-lang.com/install');
            }

            done();
        });
    });

    grunt.registerTask('adaptive-build_zepto', function() {
        var path = require('path');
        var done = this.async();
        var envCopy = {};
        var directory = path.join(process.cwd(), 'bower_components/zeptojs');

        // Copy env variables and add proper zepto modules to build
        for (var varName in process.env) {
          envCopy[varName] = process.env[varName];
        }

        var modules = grunt.option('modules') || 'zepto event ajax form fx selector stack data';
        envCopy.MODULES = modules;

        grunt.log.write('Building Zepto with the following modules: ' + modules);

        var installOptions = {
            cmd: 'npm',
            args: ['install'],
            opts: {
                cwd: directory,
            }
        };

        var buildOptions = {
            cmd: 'npm',
            args: ['run-script', 'dist'],
            opts: {
                cwd: directory,
                env: envCopy
            }
        };
        
        // First, do an `npm install` in the Zepto directory
        grunt.util.spawn(installOptions, function(error, result, code) {
            if (error) {
                grunt.log.error(error);
                done();
            }
            grunt.log.write(result);

            // Then, build zepto!
            grunt.util.spawn(buildOptions, function(error, result, code) {
                if (error) {
                    grunt.log.error(error);
                    done();
                }
                grunt.log.write(result);
                ['.js', '.min.js'].forEach(function(extension) {
                    var src = path.join(directory, 'dist/zepto' + extension);
                    var dest = path.join(process.cwd(), 'vendor', 'zepto' + extension);
                    grunt.file.copy(src, dest);
                });
                done();
            });

        });
    });

    // Copy ui.min.js to ui.js in order to fix an issue where loading bundles
    // on the CDN through preview will fail due to ui.js not existing. Fixed
    // this way to ensure backwards compatibility.
    grunt.registerTask('copy_ui', function() {
        var uiPath = 'build/js/ui.min.js';
        if (grunt.file.exists(uiPath)) {
            grunt.file.copy(uiPath, 'build/js/ui.js');
        }
    });

    // Grab the version of adaptivejs
    var getAdaptiveVersionFromNpmJson = function(stdout) {
        try {
            var versionInfo = JSON.parse(stdout);
            if (typeof versionInfo == 'string') {
                return versionInfo;
            } else {
                return versionInfo['dependencies']['adaptivejs']['version'];
            }
        } catch (e) {
            return undefined;
        }
    };

    // Check whether the installed version of adaptive.js is the latest version
    // in NPM. If it isn't, tell users to upgrade.
    grunt.registerTask('adaptive-check_version', function() {
        var done = this.async();

        console.log('Checking for newer versions of adaptivejs...');

        grunt.util.spawn({cmd: 'npm', args: ['list', 'adaptivejs', '--json']}, function(err, result) {
            var localError = 'There was an error getting the local version of adaptivejs';
            // Checking for result here rather then error because there are situations where you still get
            // the version information, but it comes with an error as well (like when testing using
            // npm link). As long as there is a result, we're good to continue.
            if (!result) {
                console.log(localError);
                return console.log(err);
            }
            var localVersion = getAdaptiveVersionFromNpmJson(result.stdout);
            if (!localVersion) {
                return console.log(localError);
            }

            grunt.util.spawn({cmd: 'npm', args: ['view', 'adaptivejs', 'version', '--json']}, function(err, result) {
                var latestError = 'There was an error getting the latest version of adaptivejs';
                // Checking for result here rather then error because there are situations where you still get
                // the version information, but it comes with an error as well (like when testing using
                // npm link). As long as there is a result, we're good to continue.
                if (!result) {
                    return console.log(latestError);
                }
                var latestVersion = getAdaptiveVersionFromNpmJson(result.stdout);
                if (!latestVersion) {
                    return console.log(latestError);
                }

                // If the local version is not less then the latest version on the
                // npm repo, return
                if (semver.gte(localVersion, latestVersion)) {
                    console.log('The version of adaptive.js you have installed is up-to-date!');
                } else {
                    console.log('\nWARNING: The version of your adaptivejs package is out of date. ' +
                                'You are currently running version ' + localVersion + '.\n' +
                                'We recommend that you upgrade to the latest version (' + latestVersion + ').\n' +
                                'You can do this by changing the version in your package.json file ' +
                                'and then running `npm install`');
                }

                return done();
            });
        });
    });

    grunt.registerTask('adaptive-preview_link', function() {
        // Grab options
        var autoOpen = grunt.option('auto');
        var port = grunt.option('port') || 8080;
        var httpsPort = grunt.option('https-port') || 8443;

        // Grab site from package.json
        var packageJSON = require(process.cwd() + '/package.json');
        var siteUrl = packageJSON.siteUrl || '';

        // Construct URLs
        var urlQueryString = 'url=' + encodeURIComponent(siteUrl);
        var bundleUrlQueryString = 'site_folder=' + encodeURIComponent('http://localhost:' + port + '/adaptive.js');
        var secureBundleUrlQueryString = 'site_folder=' + encodeURIComponent('https://localhost:' + httpsPort + '/adaptive.js');
        var partialPreviewUrl = 'https://preview.mobify.com/?';
        var previewUrl = partialPreviewUrl + [urlQueryString, bundleUrlQueryString].join('&');
        var securePreviewUrl = partialPreviewUrl + [urlQueryString, secureBundleUrlQueryString].join('&');

        console.log('\nDEVELOPING ON HTTP\n\n' + 
                    '1. Copy the following Preview URL into the browser you wish to develop on:\n' +
                    previewUrl + '\n\n' +
                    'DEVELOPING ON HTTPS\n\n' + 
                    '1. Navigate to the build file and accept the self-signed certificate:\n' +
                    'https://localhost:' + httpsPort + '/adaptive.js\n\n' +
                    '2. Copy the following Preview URL into the browser you wish to develop on:\n' +
                    securePreviewUrl + '\n\n');

        if (autoOpen) {
            grunt.util.spawn({cmd: 'open', args: [previewUrl]}, function(){})
        } else {
            console.log('If you want to automatically open preview in your browser, please run `grunt preview --auto=true`');
        }
    });

    // restore cwd
    process.chdir(parentcwd);

    grunt.registerTask('adaptive-save_credentials', 'mobify-save_credentials');

    // Do a version check at the end since it's just a warning (don't want the output to get hidden by mobify-upload)
    grunt.registerTask('adaptive-upload', ['mobify-upload', 'adaptive-check_version']);
    grunt.registerTask('adaptive-serve', ['connect:test:keepalive']);

    // Build tasks
    grunt.registerTask('adaptive-build_dev', ['adaptive-ensure_synced', 'sync', 'requirejs:ui', 'cachebuster', 'adaptive-build_config', 'requirejs:adaptation']);
    grunt.registerTask('adaptive-build_prod', ['adaptive-ensure_synced', 'sync', 'requirejs:uiMin', 'copy_ui', 'cachebuster','adaptive-build_config', 'requirejs:adaptationMin']);
    grunt.registerTask('adaptive-build', ['adaptive-build_dev']);

    grunt.registerTask('adaptive-preview', ['connect:http', 'connect:https', 'adaptive-preview_link', 'watch']);

    grunt.registerTask('adaptive-test_browser', ['connect:test:keepalive']);
    grunt.registerTask('adaptive-test_cli', ['connect:test', 'mocha_phantomjs']);
    grunt.registerTask('adaptive-test', ['adaptive-test_cli']);

    grunt.registerTask('adaptive-push', ['adaptive-build_prod','adaptive-upload']);

    // The following aliases are for backwards compatibility and are deprecated.
    grunt.registerTask('adaptive:vellum:ensure_sass_exists', 'adaptive-ensure_sass_exists_for_vellum');
    grunt.registerTask('adaptive:build:dev', 'adaptive-build_dev');
    grunt.registerTask('adaptive:build:prod', 'adaptive-build_prod');
    grunt.registerTask('adaptive:preview', 'adaptive-preview');
    grunt.registerTask('adaptive:push', 'adaptive-push');
    grunt.registerTask('adaptive:test', 'adaptive-test');
    grunt.registerTask('adaptive:test:browser', 'adaptive-test_browser');
};
